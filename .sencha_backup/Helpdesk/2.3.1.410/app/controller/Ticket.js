/*
 * File: app/controller/Ticket.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Helpdesk.controller.Ticket', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            mainView: 'mainview',
            ticketForm: 'ticketform'
        },

        control: {
            "ticketlist": {
                itemtap: 'onListItemTap'
            },
            "button[action=ScanBarcode]": {
                tap: 'onScanBarcodeTap'
            },
            "button[action=SaveTicket]": {
                tap: 'onSaveTicketTap'
            },
            "formpanel": {
                initialize: 'onTicketFormInitialize'
            }
        }
    },

    onListItemTap: function(dataview, index, target, record, e, eOpts) {
        var mainView = this.getMainView(),
            disabled = record.get('Closed');

        mainView.push(Ext.create('Helpdesk.view.TicketForm', {
            title: record.get('Title'),
            record: record,
            disabled: disabled
        }));
    },

    onScanBarcodeTap: function(button, e, eOpts) {
        var assetTagField = button.up('fieldset').down('textfield');

        cordova.plugins.barcodeScanner.scan(
            function (result) {
                if (result.cancelled === 0) {
                    assetTagField.setValue(result.text);
                }
            },
            function (error) {
                Ext.device.Notification.show({
                    title: 'Error',
                    message: 'An error occurred trying to scan the barcode. Please try again.',
                    buttons: Ext.MessageBox.OK,
                    callback: function(button) {
                    }
                });
            }
        );
    },

    onSaveTicketTap: function(button, e, eOpts) {
        var form = button.up('formpanel');

        this.saveRecord(form, 'Tickets');
    },

    onTicketFormInitialize: function(component, eOpts) {
        if (component.isDisabled()) {
            var buttons = component.query('button');

            for (var i = 0; i < buttons.length; i ++) {
                buttons[i].hide();
            }
        }
    },

    saveRecord: function(form, storeId) {
        var me = this,
            values = form.getValues(),
            record = form.getRecord(),
            newRecord = record.phantom,
            store = Ext.getStore(storeId);

        if (newRecord) {
            record.set('ID', 0);
        }

        record.beginEdit();

        record.set(values);

        if (record.isValid()) {
            Ext.Viewport.setMasked({
                xtype: 'loadmask',
                message: 'Saving...'
            });

            record.save({
                callback: function() {
                    Ext.Viewport.setMasked(false);
                },
                success: function() {
                    record.endEdit();

                    if (newRecord) {
                        store.add(record);
                    }

                    me.getMainView().pop();
                },
                failure: function() {
                    record.cancelEdit();

                    Ext.Msg.alert("Error", "Unable to commit these changes.");
                }
            });
        }
        else {
            var errors = record.validate(),
                message = "Please resolve the following errors with the record:<br><br>";

            record.cancelEdit();

            for (var i = 0; i < errors.items.length; i ++) {
                message += "<li>" + errors.items[i].getField() + " " + errors.items[i].getMessage();
            }

            Ext.Msg.alert("Error", message);
        }
    },

    deleteRecord: function(form) {

    }

});
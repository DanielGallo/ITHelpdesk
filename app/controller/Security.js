/*
 * File: app/controller/Security.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Helpdesk.controller.Security', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            mainView: 'mainview',
            mainCard: 'maincard',
            loginForm: 'loginform'
        },

        control: {
            "button[action=Login]": {
                tap: 'onLoginTap'
            },
            "button[action=Logout]": {
                tap: 'onLogoutTap'
            },
            "button[action=ShowUserAdmin]": {
                tap: 'onUserAdminTap'
            }
        }
    },

    onLoginTap: function(button, e, eOpts) {
        var me = this,
            mainView = this.getMainView(),
            mainCard = this.getMainCard(),
            loginForm = this.getLoginForm(),
            values = loginForm.getValues(),
            model = Ext.create('Helpdesk.model.Login', values);

        if (model.isValid()) {
            Ext.Viewport.setMasked({
                xtype: 'loadmask',
                message: 'Logging In...'
            });

            Ext.Ajax.request({
                url: Helpdesk.app.baseUrl + '/api/security/login',
                jsonData: values,
                withCredentials: true,
                method: 'POST',
                callback: function() {
                    Ext.Viewport.setMasked(false);
                },
                success: function(response){
                    var userId = Ext.Number.from(response.responseText, 0);

                    Helpdesk.app.userId = userId;

                    me.setupPush();
                    me.loginSuccess();
                },
                failure: function() {
                    Ext.Msg.alert("Login Failure", "Your login details were incorrect.");
                }
            });
        } else {
            Ext.Msg.alert("Invalid Details", "Please enter both an email and password to login.");
        }
    },

    onLogoutTap: function(button, e, eOpts) {
        var me = this,
            loginForm = me.getLoginForm();

        Ext.Viewport.hideMenu('right');

        loginForm.reset();

        Ext.Viewport.setMasked({
            xtype: 'loadmask',
            message: 'Logging out...'
        });

        Ext.Ajax.request({
            url: Helpdesk.app.baseUrl + '/api/security/Logout',
            withCredentials: true,
            callback: function() {
                Ext.Viewport.setMasked(false);
            },
            success: function(response){
                Helpdesk.app.userId = null;

                Ext.Viewport.setActiveItem(0);
                Ext.Viewport.removeAt(1);
            }
        });
    },

    onUserAdminTap: function(button, e, eOpts) {
        Ext.Viewport.hideMenu('right');
    },

    setupPush: function() {
        if (Ext.os.is.iOS) {
            window.pushNotification = window.plugins.pushNotification;

            window.pushNotification.register(function(token) {
                // Successfully registered device.

                // TODO: Get device name from the user - a friendly name for the device

                var device = Ext.create('Helpdesk.model.Device', {
                    Name: 'test device',
                    Token: token,
                    UserID: Helpdesk.app.userId
                });

                device.setId(0);

                device.save();

                console.log('Setup successful');
                console.log(token);
            }, function(error) {
                // Error setting up push notifications
                Ext.Msg.alert('Error', error);
                console.log('Setup unsuccessful');
                console.log(error);
            }, {
                alert : 'true',
                badge : 'true',
                sound : 'true',
                ecb   : 'onNotificationAPN'
            });

            window.onNotificationAPN = function(event) {

                console.log('Received notification');
                console.log(event);

                navigator.notification.vibrate();

                if(event.alert) {
                    //Ext.Msg.alert('Alert', event.alert);

                    Ext.device.Notification.show({
                        title: 'New record',
                        message: 'A new record has been added, would you like to view it?',
                        buttons: Ext.MessageBox.OKCANCEL,
                        callback: function(button) {
                            if (button === "ok") {
                                console.log('Yes');
                            } else {
                                console.log('No');
                            }
                        }
                    });
                }

                if(event.sound) {
                    console.log('Play sound');
                    var snd = new Media('resources/short_double_low.mp3');
                    snd.play();
                }

                if(event.badge) {
                    console.log('Update badge');
                    console.log(event.badge);
                    window.pushNotification.setApplicationIconBadgeNumber(function() {
                        // Success.
                    }, function() {
                        // Failure.
                    }, Ext.Number.from(event.badge, 0));
                }
            };
        }
    },

    removePush: function() {
        if (Ext.os.is.iOS) {
            window.pushNotification.unregister();
        }
    },

    loginSuccess: function() {
        var mainView = Ext.create('Helpdesk.view.MainView', {});

        Ext.getStore('Tickets').load();
        Ext.getStore('Users').load();

        Ext.Viewport.add(mainView);
        Ext.Viewport.setActiveItem(1);
    }

});